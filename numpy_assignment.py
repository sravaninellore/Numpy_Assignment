# -*- coding: utf-8 -*-
"""Numpy Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18XeylU3u-Y1g2hElhYy8Y2mw9NLt-QSM

# Numpy Assignment

---

**Instructions**

1. **Read Each Question Carefully**: Understand what each question is asking before starting.

2. **Complete the Functions**: For each question, you’ll find a partially completed function in the code cell. Fill in the missing parts to complete the function according to the requirements.

3. **Test Your Function**: After completing each function, run the cell to test if your function works correctly.

4. **Answer All Questions**: Ensure you complete all functions. Each question targets different aspects of NumPy.

5. **Download Your Notebook**: Once you’ve finished and tested all functions, download your notebook file (.ipynb) by selecting `File > Download > Download .ipynb`.

6. **Submit Your Work**: Upload the downloaded `.ipynb` file to the designated platform for submission.

7. **Verify Your Submission**: Check that you have submitted the correct file and that it is not corrupted. Resubmit if necessary.

Good luck, and happy coding!

---
"""

# run this code cell
import numpy as np

"""**1.Create a function desc which takes an ndarray salaries as argument and prints mean, median, variance and standard deviation of salaries** <br>
- Input  : An ndarray of salaries <br>
- Output : mean , median, variance and standard deviation
"""

# Complete this function
def desc(salaries):
  print("Mean: ",np.mean(salaries))
  print("Median: ",np.median(salaries))
  print("Variance: ",np.variance(salaries))
  print("Standard Deviation: ",np.std(salaries))
  # write your code here

# Execute this code cell (DO NOT MODIFY)

"""---
---
**2.Create a function quartiles which takes an ndarray salaries as argument and prints first, second and third quartiles** <br>
- Input  : An ndarray of salaries <br>
- Output : q1, q2 and q3
"""

def quartiles(salaries):
  print("First Quartile: ",np.percentile(salaries,25))
  print("Second Quartile: ",np.percentile(salaries,50))
  print("Third Quartile: ",np.percentile(salaries,70))
  # write your code here

salaries = np.array([50000,60000,70000,80000,90000,100000])
quartiles(salaries)

"""---
---
**3.Create a function z_scores which takes an ndarray as argument and returns an ndarray having the z scores of all elements** <br>
- Input  : An ndarray of elements <br>
- Output : An ndarray having z scores
"""

def z_scores(nums):
  z_scores = (nums-np.mean(nums))/np.std(nums)
  # Write your code here
  return z_scores

nums = np.array([10,20,0,40,50,60])
z_scores(nums)

"""---
---
**4.Create a function variance which takes an ndarray of salaries and returns the variance without using the inbuilt variance function.** <br>
 - Input  : An ndarray
 - Output : variance
"""

def variance(salaries):
  var = np.sum((salaries - np.mean(salaries))**2)/len(salaries)
  # write your code here
  return var

salaries = np.array([70000,80000,90000,100000,110000])
variance(salaries)

"""---
---
**5.Create a function comp_salaries which takes an ndarray of salaries and returns all salaries which are higher than the mean salary.** <br>
 - Input  : An ndarray of salaries
 - Output : an ndarray of salaries higher than the mean
"""

def comp_salaries(salaries):
  higher_salaries = salaries[salaries > np.mean(salaries)]
  # write your code here
  return higher_salaries

salaries = np.array([76000,69000,40000,58000,85000,92000,94000])
comp_salaries(salaries)

"""---
---
**6.Create a function cum_sum_diff which takes two ndarrays of same size and returns the difference between cumulative sums at each position.** <br>
- Input  : two ndarrays of having same number of elements
- Output : difference in cumulative sums
"""

def cum_sum_diff(a1, a2):
  diff = np.cumsum(a1) - np.cumsum(a2)
  # write your code here
  return diff

a1 = np.array([10,12,14,8,7,9,20])
a2 = np.array([12,11,8,10,9,13,7])
cum_sum_diff(a1,a2)

"""---
---
**7.Create two ndarrays a1 and a2 each of shape 4,3 using the randint function having integers between 10 to 50 and concatenate them by axis 0.**
"""

# write your code here
a1 = np.random.randint(10,50,size=(4,3))
a2 = np.random.randint(10,50,size=(4,3))
np.concatenate((a1,a2),axis=0)

"""---
---
**8.Create a function compare which takes two ndarrays as arguments having marks of 2 students in 5 subjects each and prints a list having 5 tuples where each tuple contains the max and min marks recived in each subject.**
- Input  : two ndarrays having 5 integers each
- Output : a list with 5 tuples

- sample:
    - input:
        - student 1 : [80,90,70,75,60]
        - student 2 : [75,92,65,90,95]
    - output:
        - [(80, 75), (92, 90), (70, 65), (90, 75), (95, 60)]
"""

def compare(a1, a2):
  result = list(zip(np.maximum(a1, a2), np.minimum(a1, a2)))
  # write your code here
  return result

student1 = np.array([80,90,70,75,60])
student2 = np.array([75,92,65,90,95])
compare(student1, student2)

"""---
---
**9.Create a function max_min_pos which takes an ndarray as argument and returns the position of maximum element and minimum element from the ndarray.**
- Input  : An ndarray of integers
- Output : A tuple having index of max and min element
"""

def max_min_pos(nums):
  pos_max = np.argmax(nums)
  pos_min = np.argmin(nums)
  #write your code here
  return (pos_max, pos_min)

nums = np.array([80,10,60,40,90,30,20,50])
max_min_pos(nums)

"""---
---
**10.Create a function 'between' that takes an ndarray nums and two integers A and B indicating  a range(B > A). The function should return all elements between A and B present in nums.**
- Input : An ndarray having n elements
- Output : Elements between A and B
"""

def between(nums,A,B):
  result = nums[(nums > A) & (nums < B)]
  #write your code here
  return result

nums = np.array([10,40,20,30])
between(nums, 15, 35)

